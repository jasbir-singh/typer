{"version":3,"sources":["components/InputBox.js","utils.js","fixtures.js","reducers.js","actions.js","components/Word.js","components/Paragraph.js","components/Text.js","components/TextWithSpinner.js","components/Stat.js","components/TypingStatsBar.js","components/TypingStats.js","components/WikipediaButton.js","components/App.js","registerServiceWorker.js","lib/api.js","sagas.js","index.js"],"names":["connect","wordToType","position","class","type","placeholder","slice","char","splitWords","arr","map","t","match","sum","reduce","a","b","minutesSinceTyping","seconds","nullState","text","word","paragraph","numberOfErrors","typingFinished","initialState","howToMakeFriendsAndInfluencePeople","FETCH_RANDOM_ARTICLE_FAILED","TYPE_STARTED","TYPE_SUCCESS","TYPE_FAIL","UPDATE_TYPING_STATS","TYPE_FINISHED","FETCH_RANDOM_ARTICLE_SUCCESS","FETCH_RANDOM_ARTICLE","RESET_TYPING_STATE","resetTypingState","payload","typeSuccess","typeFinished","typingStarted","fetchRandomArticle","loading","fetchRandomArticleSuccess","rawText","title","str","replace","split","filter","para","length","state","paraIndex","wordIndex","wordClassName","className","i","key","c","StyledParagraph","styled","div","Paragraph","props","Text","keyPress","bind","preventDefault","this","typeStarted","handleSuccesfulTypedKey","typeFail","startedTypingAt","console","log","document","addEventListener","removeEventListener","paragraphs","Component","mapDispatchToProps","currentTime","Date","getTime","lastKeyTyped","dispatch","isWordFinished","isLastWordOfPara","errorPosition","TextWithSpinner","size","Stat","stat","style","fontSize","TypingStatsBar","stats","TypingStats","startLoop","stopLoop","_loop","setInterval","loop","updateTypingStats","clearInterval","charsToType","timeElapsed","wpm","cpm","chars","charsTyped","x","Math","round","wordsPerMin","words","onClick","App","typingSummary","currentlyTyping","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","wikiGetRandomArticle","axios","get","rootSaga","asyncWikiCall","numOfCalls","extract","API","response","Object","values","data","query","pages","_","call","put","message","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","action","currentPosition","composeWithDevTools","applyMiddleware","thunk","run","ReactDOM","render","getElementById","URL","process","origin","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6eba485d.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nconst InputBox = ({ wordToType, position }) => (\n  <div class=\"input-group input-group-lg m-2\">\n    <input type=\"text\" placeholder={wordToType.slice(0, position.char)} class=\"form-control\" />\n  </div>\n);\n\nconst mapStateToProps = ({ wordToType, position }) => ({\n  wordToType, position\n});\n\nexport default connect(\n  mapStateToProps,\n)(InputBox);\n","const numberOfCharsinAWord = 5;\nconst stripHTML = str => str.replace(/<(?:.|\\n)*?>/gm, '');\n\nconst splitWords = arr => arr.map(t => t.match(/([^\\s]+)|\\s/g));\nconst sum = arr => arr.reduce((a, b) => a + b, 0);\nconst roundTo2Dp = num => Math.round(num, 2);\nconst minutesSinceTyping = seconds => (seconds/60) || 0;\nconst wordsPerMin = cpm => Math.round(cpm/numberOfCharsinAWord, 2);\nconst charsPerMin = (chars, seconds) => {\n  return chars && minutesSinceTyping(seconds) ? Math.round(chars / minutesSinceTyping(seconds), 2) : 0;\n};\n\nexport {\n  stripHTML,\n  splitWords,\n  charsPerMin,\n  sum,\n  roundTo2Dp,\n  minutesSinceTyping,\n  wordsPerMin,\n};\n","import { splitWords } from './utils.js';\n\nconst text1 = `Did you ever stop to think that a dog is the only animal that doesn't have to work for a living? A hen has to lay eggs, a cow has to give milk, and a canary has to sing. But a dog makes his living by giving you nothing but love.`;\n\nconst text2 = `When I was five years old, my father bought a little yellow-haired pup for fifty cents. He was the light and joy of my childhood. Every afternoon about four-thirty, he would sit in the front yard with his beautiful eyes staring steadfastly at the path, and as soon as he heard my voice or saw me swinging my dinner pail through the buck brush, he was off like a shot, racing breathlessly up the hill to greet me with leaps of joy and barks of sheer ecstasy. `;\n\n// const text1 = `I am nobody.`;\n// const text2 = `Second line.`;\n\nexport default splitWords([\n  text1,\n  text2\n]);\n","import {\n  RESET_TYPING_STATE,\n  TYPE_STARTED,\n  TYPE_SUCCESS,\n  TYPE_FAIL,\n  TYPE_FINISHED,\n  UPDATE_TYPING_STATS,\n  FETCH_RANDOM_ARTICLE_SUCCESS,\n  FETCH_RANDOM_ARTICLE\n} from './actions';\nimport howToMakeFriendsAndInfluencePeople from './fixtures.js';\n// import { combineReducers } from 'redux';\n\nexport const nullState = {\n  text: [['']],\n  wordToType: null,\n  position: {\n    word: 0,\n    char: 0,\n    paragraph: 0,\n  },\n  numberOfErrors: 0,\n  typingFinished: false,\n};\n\nconst initialState = {\n  ...nullState,\n  text: howToMakeFriendsAndInfluencePeople,\n  wordToType: howToMakeFriendsAndInfluencePeople[0][0],\n};\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n  case FETCH_RANDOM_ARTICLE:\n  case FETCH_RANDOM_ARTICLE_SUCCESS:\n  case UPDATE_TYPING_STATS:\n  case TYPE_FINISHED:\n  case TYPE_SUCCESS:\n  case RESET_TYPING_STATE:\n  case TYPE_STARTED:\n    return {\n      ...state,\n      ...action.payload,\n    };\n  case TYPE_FAIL:\n    return {\n      ...state,\n      ...action.payload,\n      numberOfErrors: state.numberOfErrors + 1,\n      errorPosition: state.currentPosition,\n    };\n  default:\n    return state;\n  }\n};\n","import { splitWords, stripHTML } from './utils.js';\nimport { nullState } from './reducers';\n\nexport const FETCH_RANDOM_ARTICLE_FAILED = 'FETCH_RANDOM_ARTICLE_FAILED';\nexport const TYPE_STARTED = 'TYPE_STARTED';\nexport const TYPE_SUCCESS = 'TYPE_SUCCESS';\nexport const TYPE_FAIL = 'TYPE_FAIL';\nexport const UPDATE_TYPING_STATS = 'UPDATE_TYPING_STATS';\nexport const TYPE_FINISHED = 'TYPE_FINISHED';\nexport const FETCH_RANDOM_ARTICLE_SUCCESS = 'FETCH_RANDOM_ARTICLE_SUCCESS';\nexport const FETCH_RANDOM_ARTICLE = 'FETCH_RANDOM_ARTICLE';\nexport const RESET_TYPING_STATE = 'RESET_TYPING_STATE';\n\nconst resetTypingState = () => ({\n  type: RESET_TYPING_STATE,\n  payload: nullState\n});\n\nconst typeStarted = () => {\n  const currentTime = (new Date()).getTime();\n  return {\n    type: TYPE_STARTED,\n    payload: {\n        currentTime,\n        startedTypingAt: currentTime,\n      }\n  };\n};\n\nconst typeSuccess = ({ paragraph, char, word, text}) => ({\n  type: TYPE_SUCCESS,\n  payload: {\n    position: { paragraph, char, word },\n    wordToType: text[paragraph][word]\n  }\n});\n\nconst typeFail = (key) => ({\n  type: TYPE_FAIL,\n  payload: {\n    lastKeyTyped: key,\n  }\n});\n\nconst typeFinished = () => ({\n  type: TYPE_FINISHED,\n  payload: {\n    typingFinished: true,\n    typingStarted: false,\n    position: {\n      char: 0,\n      word: 0,\n      paragraph: 0,\n    }\n  }\n});\n\nconst updateTypingStats = () => ({\n  type: UPDATE_TYPING_STATS,\n  payload: {\n    currentTime: (new Date()).getTime()\n  }\n});\n\nconst fetchRandomArticle = () => (\n  {\n    type: 'FETCH_RANDOM_ARTICLE',\n    payload: { loading: true }\n  }\n);\n\n\nconst handleSuccesfulTypedKey = (key, position, text) => dispatch => {\n  const isWordFinished = text[position.paragraph][position.word].length === position.char + 1;\n  const isLastWordOfPara = text[position.paragraph].length === position.word + 1;\n  const isLastPara = text.length === position.paragraph + 1;\n\n\n  if (isLastPara && isLastWordOfPara && isWordFinished ) {\n    dispatch(typeFinished());\n  } else if (isLastWordOfPara && isWordFinished) {\n    dispatch(typeSuccess({ text, paragraph: position.paragraph + 1, word: 0, char: 0 }));\n  } else if (isWordFinished) {\n    dispatch(typeSuccess({ text , ...position, word: position.word + 1, char: 0 }));\n  } else {\n    dispatch(typeSuccess({ text, ...position, char: position.char + 1 }));\n  };\n};\n\nconst fetchRandomArticleSuccess = (rawText, title) => {\n  const text = splitWords(stripHTML(rawText).split(\"\\n\").filter(para => para.length !== 0));\n  return {\n    type: 'FETCH_RANDOM_ARTICLE_SUCCESS',\n    payload: {\n      text: text,\n      title: title,\n      wordToType: text[0][0],\n      loading: false,\n    }\n  };\n};\n\nexport {\n  resetTypingState,\n  handleSuccesfulTypedKey,\n  typeSuccess,\n  typeStarted,\n  typeFail,\n  typeFinished,\n  updateTypingStats,\n  fetchRandomArticle,\n  fetchRandomArticleSuccess,\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst Word = ({ word, position, paraIndex, wordIndex }) => {\n  const wordClassName = paraIndex === position.paragraph && wordIndex === position.word ? 'current-word' : null;\n  const charClassName = (c) => (wordClassName && (c === position.char) ? 'char--current' : '');\n  return(<span className={ wordClassName }>\n    {\n      word.split('').map((char, i) => (\n        <span key={i} className={ charClassName(i) }>\n          { char }\n        </span>\n      ))\n    }\n  </span>\n  )\n};\n\nconst mapStateToProps = (state) => ({\n  position: state.position\n});\n\nexport default connect(\n  mapStateToProps,\n)(Word);\n","import React from 'react';\nimport styled from 'styled-components';\nimport Word from './Word.js';\n\nconst StyledParagraph = styled.div`\n  .current-word {\n    background-color: blanchedalmond;\n  }\n\n  .char--current {\n    text-decoration: underline;\n    font-weight: bolder;\n    font-size: 2rem;\n    color: green;\n  };\n\n  .char--correctly-typed {\n    color: green;\n  };\n\n  .char--error {\n    background-color: red;\n    color: white;\n  }\n`;\n\nconst Paragraph = (props) => {\n  const {  text, paraIndex } = props;\n\n  return (\n    <StyledParagraph className=\"pb-3\">\n      {\n        text.map((word, i) => (<Word word={word} key={i} wordIndex={i} paraIndex={paraIndex} />))\n      }\n    </StyledParagraph>\n  );\n};\n\nexport default Paragraph;\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport InputBox from './InputBox.js';\nimport {\n  fetchRandomArticle,\n  typeSuccess,\n  typeStarted,\n  typeFail,\n  typeFinished,\n  handleSuccesfulTypedKey,\n} from '../actions';\nimport Paragraph from './Paragraph';\n\nclass Text extends Component {\n  constructor(props) {\n    super(props);\n    this.keyPress = this.keyPress.bind(this);\n  }\n  keyPress(key) {\n    key.preventDefault();\n\n    const {\n      text,\n      position,\n      wordToType,\n      typeStarted,\n      handleSuccesfulTypedKey,\n      typeFail,\n      startedTypingAt,\n    } = this.props;\n\n    if ((position.paragraph + position.word + position.char === 0) && !startedTypingAt) {\n      typeStarted();\n    };\n\n    if (key.key === wordToType[position.char]) {\n      handleSuccesfulTypedKey(key, position, text);\n    } else {\n      typeFail(key.key, wordToType[position.char]);\n    };\n  }\n\n  componentDidMount() {\n    console.log(`added event listner ${this.props.text[0][0]}`);\n    document.addEventListener('keypress', this.keyPress, false);\n  }\n\n  componentWillUnmount() {\n    console.log(`removed event listner ${this.props.text[0][0]}`);\n    document.removeEventListener('keypress', this.keyPress, false);\n  }\n\n  paragraphs() {\n    return this\n      .props\n      .text\n      .map(\n        (paragraph, i) => (\n          <Paragraph key={`${paragraph}-${i}`} {...this.props} text={paragraph} paraIndex={i} className={`para-${i}`}> >\n          </Paragraph>\n        )\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"text-justify jumbotron\">\n        {\n          this.paragraphs()\n        }\n\n        {\n          this.props.title && <p><em>{this.props.title}</em></p>\n        }\n\n        <InputBox />\n      </ div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    text: state.text,\n    title: state.title,\n    position: state.position,\n    wordToType: state.wordToType,\n    errorPosition: state.errorPosition,\n    startedTypingAt: state.startedTypingAt,\n  }\n};\n\nconst mapDispatchToProps = {\n  fetchRandomArticle,\n  typeSuccess,\n  typeStarted,\n  typeFail,\n  typeFinished,\n  handleSuccesfulTypedKey,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Text);\n","import React from 'react';\nimport Text from './Text';\nimport {\n  Wave\n} from 'better-react-spinkit';\n\nconst TextWithSpinner = ({ loading }) => (\n    <div>\n    {\n      loading ? <Wave size={150} /> : <Text />\n    }\n  </div>\n);\n\nexport default TextWithSpinner;\n","import React from 'react';\n\nconst Stat = ({ stat, text }) => (\n    <div className=\"border-bottom flex-fill text-center\">\n    <span style={{ fontSize: '3rem' }}>\n    { stat }\n  </span>\n    { text }\n  </div>\n);\n\nexport default Stat;\n","import React from 'react';\nimport Stat from './Stat';\n\nconst TypingStatsBar = ({ stats }) => {\n  return (\n    <div className=\"d-flex align-content-center mt-4 mb-4\">\n      {\n        stats.map((props, i) => <Stat key={i} {...props} />)\n      }\n    </div>\n  );\n};\n\nexport default TypingStatsBar;\n","import React, { Component } from 'react';\nimport TypingStatsBar from './TypingStatsBar.js';\nimport { connect } from 'react-redux';\nimport { updateTypingStats } from '../actions';\nimport {\n  sum,\n  charsPerMin,\n  wordsPerMin,\n} from '../utils.js';\n\nclass TypingStats extends Component {\n  componentDidMount() {\n    this.startLoop();\n  }\n\n  componentWillUnmount() {\n    this.stopLoop();\n  }\n\n  startLoop() {\n    if (!this._loop) {\n      this._loop = setInterval(this.loop.bind(this), 2000);\n    }\n  }\n\n  loop() {\n    this.props.updateTypingStats();\n  }\n\n  stopLoop() {\n    clearInterval(this._loop);\n  }\n\n  stats () {\n    const {\n      charsToType,\n      timeElapsed,\n      numberOfErrors,\n      wpm,\n      cpm\n    } = this.props;\n\n    return [\n      {\n        stat: wpm,\n        text: 'WPM'\n      },\n      {\n        stat: cpm,\n        text: 'CPM'\n      },\n      {\n        stat: timeElapsed || 0,\n        text: 's elapsed'\n      },\n      {\n        stat: charsToType,\n        text: 'chars to type'\n      },\n      {\n        stat: numberOfErrors,\n        text: 'errors',\n      }\n    ];\n  }\n\n  render() {\n    if (this.props.typingFinished) this.stopLoop();\n\n    return (\n      <TypingStatsBar stats={this.stats()} />\n    );\n  }\n}\n\nconst mapStateToProps = (\n  {\n    position,\n    numberOfErrors,\n    text,\n    startedTypingAt,\n    currentTime,\n    typingFinished\n  }\n) => {\n  const timeElapsed = (currentTime - startedTypingAt)/1000;\n  const charsTyped = sum(text.slice(0, position.paragraph).map(x => x.length)) + sum(text[position.paragraph].slice(0, position.word).map(x => x.length)) + position.char;\n  const cpm = charsPerMin(charsTyped, timeElapsed);\n  const wpm = wordsPerMin(cpm);\n  const typeableChars = sum(text.map(words => sum(words.map(word => word.length)) ));\n  const charsToType =  typeableChars - charsTyped;\n\n  return {\n    charsToType,\n    timeElapsed,\n    typingFinished,\n    numberOfErrors,\n    wpm,\n    cpm,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { updateTypingStats }\n)(TypingStats);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  fetchRandomArticle,\n} from '../actions';\n\nconst WikipediaButton = ({ fetchRandomArticle }) => {\n  return (\n    <p className=\"btn btn-primary\" onClick={fetchRandomArticle}>Fetch random Wiki Article</p>\n  );\n};\n\nconst mapDispatchToProps = {\n  fetchRandomArticle,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(WikipediaButton);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport TextWithSpinner from './TextWithSpinner';\nimport TypingStats from './TypingStats';\nimport WikipediaButton from './WikipediaButton';\n\nclass App extends Component {\n  typingSummary() {\n    return (\n      <div>\n        <h1>Summary Statistics</h1>\n        <TypingStats />\n        <WikipediaButton />\n      </div>\n    );\n  }\n\n  currentlyTyping() {\n    const { loading } = this.props;\n\n    return (\n      <div>\n        <TypingStats />\n        <TextWithSpinner loading={loading} />\n        <WikipediaButton />\n      </div>\n    );\n  }\n\n  render() {\n    const { typingFinished } = this.props;\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"p-2\">\n          { typingFinished ? this.typingSummary() :  this.currentlyTyping() }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  typingFinished: state.typingFinished,\n  loading: state.loading\n});\n\nexport default connect(\n  mapStateToProps,\n)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\nimport { guardianApiKey } from './api_keys';\n\nconst randomDate = (start, end) => {\n  const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n  return `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;\n};\n\nconst getRandomGuardianArticle = () => {\n  const date = randomDate(new Date(2012, 0, 1), new Date());\n  const url = `https://content.guardianapis.com/search?q=debate&tag=politics/politics&from-date=${date}&api-key=${guardianApiKey}&show-fields=bodyText`;\n  return axios.get(url);\n};\n\nconst wikiGetRandomArticle = () => {\n  const url = \"https://en.wikipedia.org/w/api.php?origin=*&action=query&generator=random&prop=extracts&exchars=1000&format=json\";\n  return axios.get(url);\n};\n\nexport {\n  getRandomGuardianArticle,\n  wikiGetRandomArticle,\n};\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport * as API from './lib/api';\nimport {\n  FETCH_RANDOM_ARTICLE_FAILED,\n  FETCH_RANDOM_ARTICLE,\n  fetchRandomArticleSuccess,\n  resetTypingState\n} from './actions.js';\n\nasync function asyncWikiCall() {\n  let text;\n  let numOfCalls = 0;\n  while (true) {\n    if ((numOfCalls > 10) || (text && (!text.title.match(/user|talk|Wikipedia|Template/i) && text.extract.length > 100))) {\n      break;\n    } else {\n      const response = await API.wikiGetRandomArticle();\n      text = Object.values(response.data.query.pages)[0];\n      numOfCalls++;\n    };\n  }\n  return text;\n}\n\nfunction* fetchRandomArticle(_) {\n  try {\n    const text = yield call(asyncWikiCall);\n\n    yield put(resetTypingState());\n    yield put(fetchRandomArticleSuccess(text.extract, text.title));\n  } catch (e) {\n    yield put({type: FETCH_RANDOM_ARTICLE_FAILED, message: e.message});\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(FETCH_RANDOM_ARTICLE, fetchRandomArticle);\n};\n\nexport default rootSaga;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(thunk, sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}